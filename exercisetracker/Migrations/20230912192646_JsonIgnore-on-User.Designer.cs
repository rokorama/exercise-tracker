// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using exercisetracker.Data;

#nullable disable

namespace exercisetracker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230912192646_JsonIgnore-on-User")]
    partial class JsonIgnoreonUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("exercisetracker.Models.RunInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Outside")
                        .HasColumnType("bit");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WarmupTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("RunningExercises");
                });

            modelBuilder.Entity("exercisetracker.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("exercisetracker.Models.WeightExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnMachine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WeightAscending")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("WeightExercises");
                });

            modelBuilder.Entity("exercisetracker.Models.WeightExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExerciseSets");
                });

            modelBuilder.Entity("exercisetracker.Models.WorkoutSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("exercisetracker.Models.RunInstance", b =>
                {
                    b.HasOne("exercisetracker.Models.WorkoutSession", null)
                        .WithMany("Runs")
                        .HasForeignKey("WorkoutSessionId");
                });

            modelBuilder.Entity("exercisetracker.Models.WeightExercise", b =>
                {
                    b.HasOne("exercisetracker.Models.WorkoutSession", null)
                        .WithMany("WeightExercises")
                        .HasForeignKey("WorkoutSessionId");
                });

            modelBuilder.Entity("exercisetracker.Models.WorkoutSession", b =>
                {
                    b.HasOne("exercisetracker.Models.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("exercisetracker.Models.User", b =>
                {
                    b.Navigation("WorkoutSessions");
                });

            modelBuilder.Entity("exercisetracker.Models.WorkoutSession", b =>
                {
                    b.Navigation("Runs");

                    b.Navigation("WeightExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
